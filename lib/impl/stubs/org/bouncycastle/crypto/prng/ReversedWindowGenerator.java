/**
 * 
 * Lightweight psuedo-random number generators.
 */
package org.bouncycastle.crypto.prng;


/**
 *  Takes bytes generated by an underling RandomGenerator and reverses the order in
 *  each small window (of configurable size).
 *  <p>
 *  Access to internals is synchronized so a single one of these can be shared.
 *  </p>
 */
public class ReversedWindowGenerator implements RandomGenerator {

	public ReversedWindowGenerator(RandomGenerator generator, int windowSize) {
	}

	/**
	 *  Add more seed material to the generator.
	 * 
	 *  @param seed a byte array to be mixed into the generator's state.
	 */
	public void addSeedMaterial(byte[] seed) {
	}

	/**
	 *  Add more seed material to the generator.
	 * 
	 *  @param seed a long value to be mixed into the generator's state.
	 */
	public void addSeedMaterial(long seed) {
	}

	/**
	 *  Fill bytes with random values.
	 * 
	 *  @param bytes byte array to be filled.
	 */
	public void nextBytes(byte[] bytes) {
	}

	/**
	 *  Fill part of bytes with random values.
	 * 
	 *  @param bytes byte array to be filled.
	 *  @param start index to start filling at.
	 *  @param len length of segment to fill.
	 */
	public void nextBytes(byte[] bytes, int start, int len) {
	}
}
